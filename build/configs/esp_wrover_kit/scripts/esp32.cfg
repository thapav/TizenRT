###########################################################################
#
# Copyright 2019 Samsung Electronics All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
###########################################################################

#
# Example OpenOCD configuration file for ESP32-WROVER-KIT board.
# For example, OpenOCD can be started for ESP32 debugging on
# openocd -f scripts/esp32.cfg
#

# Source the JTAG interface configuration file
source [find interface/ftdi/esp32_devkitj_v1.cfg]


# With no variables set, openocd will configure JTAG for the two cores of the ESP32 and
# will do automatic RTOS detection. This can be be adjusted by uncommenting any of the
# following lines:
#
# Only configure the PRO CPU
#set ESP32_ONLYCPU 1
# Only configure the APP CPU
#set ESP32_ONLYCPU 2
# Disable RTOS support
set ESP32_RTOS none


# The MTDI pin of ESP32, being among four pins used for JTAG communication, is also one
# of ESP32’s bootstrapping pins. On power up ESP32 is sampling binary level on MTDI to
# set it’s internal voltage regulator used to supply power to external SPI flash chip.
# If binary level on MDTI pin on power up is low, the voltage regulator is set to deliver
# 3.3 V, if it is high, then the voltage is set to 1.8 V. The MTDI pin should have a
# pull-up or may rely on internal weak pull down resistor (see ESP32 Series Datasheet for
# details), depending on the type of SPI chip used. Once JTAG is connected, it overrides
# the pull-up or pull-down resistor that is supposed to do the bootstrapping.
#
# To handle this issue target/esp32.cfg provides `ESP32_FLASH_VOLTAGE` parameter to set
# the idle state of the TDO line to a specified binary level, therefore reducing the
# chance of a bad bootup of application due to incorrect flash voltage.
#
# Check specification of ESP32 module connected to JTAG, what is the power supply voltage
# of SPI flash chip. Then set ESP32_FLASH_VOLTAGE accordingly.
# Most WROOM modules use 3.3 V flash, while WROVER modules use 1.8 V flash.
#
# Enable this for 1.8V SPI flash
#set ESP32_FLASH_VOLTAGE 1.8
# Enable this for 3.3V SPI flash
set ESP32_FLASH_VOLTAGE 3.3


# Source the ESP32 configuration file
source [find target/esp32.cfg]

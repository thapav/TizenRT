#
# For a description of the syntax of this configuration file,
# see kconfig-language at https://www.kernel.org/doc/Documentation/kbuild/kconfig-language.txt
#

config BLUETOOTH
	bool "Enable Bluetooth Subsystem"
	default n
	---help---
		Enable Bluetooth Subsystem

if BLUETOOTH

config BLUETOOTH_MAX_CONN
	int
	prompt "Maximum number of simultaneous connections"
	default 1
	range 1 16
	---help---
		Maximum number of simultaneous Bluetooth connections
		supported. The minimum (and default) number is 1.

config BLUETOOTH_MAX_PAIRED
	int
	prompt "Maximum number of paired devices"
	default 1
	range 1 32
	---help---
		Maximum number of paired Bluetooth devices. The minimum (and
		default) number is 1.

config BLUETOOTH_MAXSCANDATA
	int "Max scan data size"
	default 64
	range 1 255
	---help---
		Scan results will be buffered in memory until the user requests the
		scan results.  This parameter specifies the maximum size of the
		advertiser data that accompanies the scan result.

		This contributes to a static memory allocation that will be greater
		than CONFIG_BLUETOOTH_MAXSCANDATA * CONFIG_BLUETOOTH_MAXSCANRESULT

config BLUETOOTH_MAXSCANRESULT
	int "Max scan results"
	default 8
	range 1 255
	---help---
		Scan results will be buffered in memory until the user requests the
		scan results.  This parameter specifies the maximum number of
		results that can be buffered before scan results are lost.

		This contributes to a static memory allocation that will be greater
		than CONFIG_BLUETOOTH_MAXSCANDATA * CONFIG_BLUETOOTH_MAXSCANRESULT

config BLUETOOTH_MAXDISCOVER
	int "Max GATT discovery results"
	default 8
	range 1 255
	---help---
		GATT discovery results will be buffered in memory until the user
		requests the results.  This parameter specifies the maximum results
		that can be buffered before discovery results are lost.

config BLUETOOTH_BUFFER_PREALLOC
	int "Number of pre-allocated buffer structures"
	default 20
	---help---
		This specifies the total number of preallocated buffer structures.
		This is for performance optimization.  If additional buffer structures
		are needed, they will be allocated dynamically at some loss of
		performance.

config BLUETOOTH_BUFFER_IRQRESERVE
	int "Reserved pre-allocated primitive structures"
	default 0
	---help---
		If buffer structures can be allocated from interrupt handlers, then
		this specifies the number of pre-allocated structures that are
		reserved for for use only by interrupt handlers.  This may be set
		zero to reserve no buffers for interrupt handlers. In that case,
		the allocation will fail if tasking logic has allocated them all.

		Interrupt logic will first attempt to allocate from the general,
		pre-allocated buffer pool that will contain up to (size
		CONFIG_BLUETOOTH_BUFFER_PREALLOC - BLUETOOTH_BUFFER_IRQRESERVE)
		entries.  If that fails, then it will try to take a buffer from
		the reserve (size CONFIG_BLUETOOTH_BUFFER_IRQRESERVE).

		Non-interrupt logic will also first attempt to allocate from the
		general, pre-allocated buffer pool.  If that fails, it will
		dynamically allocate the buffer with an additional cost in
		performance.

		NOTE:  The Bluetooth stack never allocates buffers from the
		interrupt level.  This setting only needs to be non-zero if your
		low-level Bluetooth driver needs to do such allocations.

menu "Kernel Thread Configuration"

config BLUETOOTH_TXCMD_STACKSIZE
	int "Tx command thread stack size"
	default 1024

config BLUETOOTH_TXCMD_PRIORITY
	int "Tx command thread priority"
	default 100
	range 1 255

config BLUETOOTH_TXCMD_NMSGS
	int "Tx command thread mqueue size"
	default 16

config BLUETOOTH_TXCONN_STACKSIZE
	int "Tx connection thread stack size"
	default 1024

config BLUETOOTH_TXCONN_PRIORITY
	int "Tx connection thread priority"
	default 100
	range 1 255

config BLUETOOTH_TXCONN_NMSGS
	int "Tx connection thread mqueue size"
	default 16

endmenu # Kernel Thread Configuration

config BLUETOOTH_SMP_SELFTEST
	bool
	prompt "Bluetooth SMP self tests executed on init"
	default n
	---help---
		This option enables SMP self-tests executed on startup
		to verify security and crypto functions.

menu "Common I/O Buffer Support"

config MM_IOB
	bool "Enable generic I/O buffer support"
	default y
	---help---
		This setting will build the common I/O buffer (IOB) support
		library.

if MM_IOB

config IOB_NBUFFERS
	int "Number of pre-allocated I/O buffers"
	default 24 
	range 8 36
	---help---
		Each packet is represented by a series of small I/O buffers in a
		chain.  This setting determines the number of preallocated I/O
		buffers available for packet data.

config IOB_BUFSIZE
	int "Payload size of one I/O buffer"
	default 196
	---help---
		Each packet is represented by a series of small I/O buffers in a
		chain.  This setting determines the data payload each preallocated
		I/O buffer.

config IOB_NCHAINS
	int "Number of pre-allocated I/O buffer chain heads"
	default 0 if !NET_READAHEAD && !NET_UDP_READAHEAD
	default 8 if NET_READAHEAD || NET_UDP_READAHEAD
	---help---
		These tiny nodes are used as "containers" to support queueing of
		I/O buffer chains.  This will limit the number of I/O transactions
		that can be "in-flight" at any give time.  The default value of
		zero disables this features.

		These generic I/O buffer chain containers are not currently used
		by any logic in NuttX.  That is because their other other specialized
		I/O buffer chain containers that also carry a payload of usage
		specific information.

config IOB_THROTTLE
	int "I/O buffer throttle value"
	default 0 if !NET_WRITE_BUFFERS || !NET_READAHEAD
	default 8 if NET_WRITE_BUFFERS && NET_READAHEAD
	---help---
		TCP write buffering and read-ahead buffer use the same pool of free
		I/O buffers.  In order to prevent uncontrolled incoming TCP packets
		from hogging all of the available, pre-allocated I/O buffers, a
		throttling value is required.  This throttle value assures that
		I/O buffers will be denied to the read-ahead logic before TCP writes
		are halted.

config IOB_DEBUG
	bool "Force I/O buffer debug"
	default n
	depends on DEBUG_FEATURES && !SYSLOG_BUFFER
	---help---
		This option will force debug output from I/O buffer logic.  This
		is not normally something that would want to do but is convenient
		if you are debugging the I/O buffer logic and do not want to get
		overloaded with other un-related debug output.

		NOTE that this selection is not available if IOBs are being used
		to syslog buffering logic (CONFIG_SYSLOG_BUFFER=y)!

endif # MM_IOB
endmenu # Common I/O buffer support
endif # BLUETOOTH
